// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: validators.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BtcValidators_GetInfo_FullMethodName              = "/proto.BtcValidators/GetInfo"
	BtcValidators_CreateValidator_FullMethodName      = "/proto.BtcValidators/CreateValidator"
	BtcValidators_RegisterValidator_FullMethodName    = "/proto.BtcValidators/RegisterValidator"
	BtcValidators_AddFinalitySignature_FullMethodName = "/proto.BtcValidators/AddFinalitySignature"
	BtcValidators_QueryValidator_FullMethodName       = "/proto.BtcValidators/QueryValidator"
	BtcValidators_QueryValidatorList_FullMethodName   = "/proto.BtcValidators/QueryValidatorList"
)

// BtcValidatorsClient is the client API for BtcValidators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtcValidatorsClient interface {
	// GetInfo returns the information of the daemon
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// CreateValidator generates and saves a validator object
	CreateValidator(ctx context.Context, in *CreateValidatorRequest, opts ...grpc.CallOption) (*CreateValidatorResponse, error)
	// RegisterValidator sends a transactions to Babylon to register a BTC
	// validator
	RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error)
	// AddFinalitySignature sends a transactions to Babylon to add a Finality
	// signature for a block
	AddFinalitySignature(ctx context.Context, in *AddFinalitySignatureRequest, opts ...grpc.CallOption) (*AddFinalitySignatureResponse, error)
	// QueryValidator queries the validator
	QueryValidator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
	// QueryValidatorList queries a list of validators
	QueryValidatorList(ctx context.Context, in *QueryValidatorListRequest, opts ...grpc.CallOption) (*QueryValidatorListResponse, error)
}

type btcValidatorsClient struct {
	cc grpc.ClientConnInterface
}

func NewBtcValidatorsClient(cc grpc.ClientConnInterface) BtcValidatorsClient {
	return &btcValidatorsClient{cc}
}

func (c *btcValidatorsClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, BtcValidators_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcValidatorsClient) CreateValidator(ctx context.Context, in *CreateValidatorRequest, opts ...grpc.CallOption) (*CreateValidatorResponse, error) {
	out := new(CreateValidatorResponse)
	err := c.cc.Invoke(ctx, BtcValidators_CreateValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcValidatorsClient) RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error) {
	out := new(RegisterValidatorResponse)
	err := c.cc.Invoke(ctx, BtcValidators_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcValidatorsClient) AddFinalitySignature(ctx context.Context, in *AddFinalitySignatureRequest, opts ...grpc.CallOption) (*AddFinalitySignatureResponse, error) {
	out := new(AddFinalitySignatureResponse)
	err := c.cc.Invoke(ctx, BtcValidators_AddFinalitySignature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcValidatorsClient) QueryValidator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, BtcValidators_QueryValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcValidatorsClient) QueryValidatorList(ctx context.Context, in *QueryValidatorListRequest, opts ...grpc.CallOption) (*QueryValidatorListResponse, error) {
	out := new(QueryValidatorListResponse)
	err := c.cc.Invoke(ctx, BtcValidators_QueryValidatorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtcValidatorsServer is the server API for BtcValidators service.
// All implementations must embed UnimplementedBtcValidatorsServer
// for forward compatibility
type BtcValidatorsServer interface {
	// GetInfo returns the information of the daemon
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// CreateValidator generates and saves a validator object
	CreateValidator(context.Context, *CreateValidatorRequest) (*CreateValidatorResponse, error)
	// RegisterValidator sends a transactions to Babylon to register a BTC
	// validator
	RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error)
	// AddFinalitySignature sends a transactions to Babylon to add a Finality
	// signature for a block
	AddFinalitySignature(context.Context, *AddFinalitySignatureRequest) (*AddFinalitySignatureResponse, error)
	// QueryValidator queries the validator
	QueryValidator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
	// QueryValidatorList queries a list of validators
	QueryValidatorList(context.Context, *QueryValidatorListRequest) (*QueryValidatorListResponse, error)
	mustEmbedUnimplementedBtcValidatorsServer()
}

// UnimplementedBtcValidatorsServer must be embedded to have forward compatible implementations.
type UnimplementedBtcValidatorsServer struct {
}

func (UnimplementedBtcValidatorsServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedBtcValidatorsServer) CreateValidator(context.Context, *CreateValidatorRequest) (*CreateValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidator not implemented")
}
func (UnimplementedBtcValidatorsServer) RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedBtcValidatorsServer) AddFinalitySignature(context.Context, *AddFinalitySignatureRequest) (*AddFinalitySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinalitySignature not implemented")
}
func (UnimplementedBtcValidatorsServer) QueryValidator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidator not implemented")
}
func (UnimplementedBtcValidatorsServer) QueryValidatorList(context.Context, *QueryValidatorListRequest) (*QueryValidatorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryValidatorList not implemented")
}
func (UnimplementedBtcValidatorsServer) mustEmbedUnimplementedBtcValidatorsServer() {}

// UnsafeBtcValidatorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtcValidatorsServer will
// result in compilation errors.
type UnsafeBtcValidatorsServer interface {
	mustEmbedUnimplementedBtcValidatorsServer()
}

func RegisterBtcValidatorsServer(s grpc.ServiceRegistrar, srv BtcValidatorsServer) {
	s.RegisterService(&BtcValidators_ServiceDesc, srv)
}

func _BtcValidators_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcValidators_CreateValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).CreateValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_CreateValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).CreateValidator(ctx, req.(*CreateValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcValidators_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).RegisterValidator(ctx, req.(*RegisterValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcValidators_AddFinalitySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFinalitySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).AddFinalitySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_AddFinalitySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).AddFinalitySignature(ctx, req.(*AddFinalitySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcValidators_QueryValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).QueryValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_QueryValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).QueryValidator(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BtcValidators_QueryValidatorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).QueryValidatorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_QueryValidatorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).QueryValidatorList(ctx, req.(*QueryValidatorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtcValidators_ServiceDesc is the grpc.ServiceDesc for BtcValidators service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtcValidators_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BtcValidators",
	HandlerType: (*BtcValidatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _BtcValidators_GetInfo_Handler,
		},
		{
			MethodName: "CreateValidator",
			Handler:    _BtcValidators_CreateValidator_Handler,
		},
		{
			MethodName: "RegisterValidator",
			Handler:    _BtcValidators_RegisterValidator_Handler,
		},
		{
			MethodName: "AddFinalitySignature",
			Handler:    _BtcValidators_AddFinalitySignature_Handler,
		},
		{
			MethodName: "QueryValidator",
			Handler:    _BtcValidators_QueryValidator_Handler,
		},
		{
			MethodName: "QueryValidatorList",
			Handler:    _BtcValidators_QueryValidatorList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validators.proto",
}
