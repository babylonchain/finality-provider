syntax = "proto3";

package proto;

import "gogoproto/gogo.proto";

option go_package = "github.com/babylonchain/btc-validator/proto";

service BtcValidators {
    // GetInfo returns the information of the daemon
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    // CreateValidator generates and saves a validator object
    rpc CreateValidator (CreateValidatorRequest)
        returns (CreateValidatorResponse);

    // RegisterValidator sends a transactions to Babylon to register a BTC
    // validator
    rpc RegisterValidator (RegisterValidatorRequest)
        returns (RegisterValidatorResponse);

    // AddFinalitySignature sends a transactions to Babylon to add a Finality
    // signature for a block
    rpc AddFinalitySignature(AddFinalitySignatureRequest)
        returns (AddFinalitySignatureResponse);

    // QueryValidator queries the validator
    rpc QueryValidator (QueryValidatorRequest) returns (QueryValidatorResponse);
    // QueryValidatorList queries a list of validators
    rpc QueryValidatorList (QueryValidatorListRequest)
        returns (QueryValidatorListResponse);
}

message GetInfoRequest {
}

message GetInfoResponse {
    string version = 1;
}

message CreateValidatorRequest {
    // key_name is the identifier key in keyring
    string key_name = 1;
}

message CreateValidatorResponse {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    string babylon_pk = 1;
    // btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
    string btc_pk = 2;
}

message RegisterValidatorRequest {
    // the key name of the BTC validator
    string key_name = 1;
}

message RegisterValidatorResponse {
    // hash of the successful Babylon registration transaction
    bytes tx_hash = 1;
}

message AddFinalitySignatureRequest {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    bytes babylon_pk = 1;
    // height is the height of the Babylon block
    uint64 height = 2;
    // last_commit_hash is the last commit hash of the Babylon block
    bytes last_commit_hash = 3;
}

message AddFinalitySignatureResponse {
    // hash of the successful Babylon finality signature submission transaction
    bytes tx_hash = 1;
    string extracted_sk_hex = 2;
    string local_sk_hex = 3;
}

message QueryValidatorRequest {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    bytes babylon_pk = 1;
}

message QueryValidatorResponse {
    ValidatorInfo validator = 1;
}

message QueryValidatorListRequest {
    // TODO add pagination in case the list gets large
}

message QueryValidatorListResponse {
    repeated ValidatorInfo validators = 1;
    // TODO add pagination in case the list gets large
}

message Validator {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    bytes babylon_pk = 1;
    // btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
    bytes btc_pk = 2;
    // pop is the proof of possession of babylon_pk and btc_pk
    ProofOfPossession pop = 3;
    // key_name is the identifier of the keyring
    string key_name = 4;
    // last_voted_height defines the height of the last voted Babylon block
    uint64 last_voted_height = 5;
    // last_committed_height defines the height of the last Babylon block
    // to which the validator committed a randomness pair
    uint64 last_committed_height = 6;
    // status defines the current validator status
    ValidatorStatus status = 7;
}

// ValidatorInfo is the basic information of a validator mainly for external usage
message ValidatorInfo {
    // babylon_pk_hex is the hex string of the Babylon secp256k1 PK of this BTC validator
    string babylon_pk_hex = 1;
    // btc_pk_hex is the hex string of the BTC secp256k1 PK of the validator encoded in BIP-340 spec
    string btc_pk_hex = 2;
    // last_voted_height defines the height of the last voted Babylon block
    uint64 last_voted_height = 5;
    // last_committed_height defines the height of the last Babylon block
    // to which the validator committed a randomness pair
    uint64 last_committed_height = 6;
    // status defines the current validator status
    ValidatorStatus status = 7;
}

// ProofOfPossession is the proof of possession that a Babylon secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
message ProofOfPossession {
    // babylon_sig is the signature generated via sign(sk_babylon, pk_btc)
    bytes babylon_sig = 1;
    // btc_sig is the signature generated via sign(sk_btc, babylon_sig)
    // the signature follows encoding in BIP-340 spec
    bytes btc_sig = 2;
}

message SchnorrRandPair {
    bytes pub_rand = 1;
    bytes sec_rand = 2;
}

// ValidatorStatus is the status of a BTC validator
// a Validator object has 4 states:
//  - Created - created and managed by validator client, not registered to
//  babylon yet
//  - Registered - created and registered to Babylon, but not voting yet (No
//  delegated stake)
//  - Active - created and registered to Babylon with stake to vote
//  - Inactive - created and registered to Babylon with no stake to vote.
//  Validator was already active.
// Valid State Transactions:
//  - Created   -> Registered
//  - Registered -> Active
//  - Active    -> Inactive
//  - Inactive  -> Active
enum ValidatorStatus {
    option (gogoproto.goproto_enum_prefix) = false;

    // CREATED defines a validator that is awaiting registration
    CREATED = 0 [(gogoproto.enumvalue_customname) = "CREATED"];
    // REGISTERED defines a validator that has been registered
    // to Babylon but has no delegated stake
    REGISTERED = 1 [(gogoproto.enumvalue_customname) = "REGISTERED"];
    // ACTIVE defines a validator that is delegated to vote
    ACTIVE = 2 [(gogoproto.enumvalue_customname) = "ACTIVE"];
    // INACTIVE defines a validator whose delegations are reduced to zero
    INACTIVE = 3 [(gogoproto.enumvalue_customname) = "INACTIVE"];
}
