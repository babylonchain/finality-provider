// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: validators.proto

package proto

import (
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValidatorStatus is the status of a BTC validator
// a Validator object has 4 states:
//   - Created - created and managed by validator client, not registered to
//     babylon yet
//   - Registered - created and registered to Babylon, but not voting yet (No
//     delegated stake)
//   - Active - created and registered to Babylon with stake to vote
//   - Inactive - created and registered to Babylon with no stake to vote.
//     Validator was already active.
//
// Valid State Transactions:
//   - Created   -> Registered
//   - Registered -> Active
//   - Active    -> Inactive
//   - Inactive  -> Active
type ValidatorStatus int32

const (
	// CREATED defines a validator that is awaiting registration
	ValidatorStatus_CREATED ValidatorStatus = 0
	// REGISTERED defines a validator that has been registered
	// to Babylon but has no delegated stake
	ValidatorStatus_REGISTERED ValidatorStatus = 1
	// ACTIVE defines a validator that is delegated to vote
	ValidatorStatus_ACTIVE ValidatorStatus = 2
	// INACTIVE defines a validator whose delegations are reduced to zero but not slashed
	ValidatorStatus_INACTIVE ValidatorStatus = 3
	// SLASHED defines a validator that has been slashed
	ValidatorStatus_SLASHED ValidatorStatus = 4
)

// Enum value maps for ValidatorStatus.
var (
	ValidatorStatus_name = map[int32]string{
		0: "CREATED",
		1: "REGISTERED",
		2: "ACTIVE",
		3: "INACTIVE",
		4: "SLASHED",
	}
	ValidatorStatus_value = map[string]int32{
		"CREATED":    0,
		"REGISTERED": 1,
		"ACTIVE":     2,
		"INACTIVE":   3,
		"SLASHED":    4,
	}
)

func (x ValidatorStatus) Enum() *ValidatorStatus {
	p := new(ValidatorStatus)
	*p = x
	return p
}

func (x ValidatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_validators_proto_enumTypes[0].Descriptor()
}

func (ValidatorStatus) Type() protoreflect.EnumType {
	return &file_validators_proto_enumTypes[0]
}

func (x ValidatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorStatus.Descriptor instead.
func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{0}
}

type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{0}
}

type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CreateValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key_name is the identifier key in keyring
	KeyName string `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// pass_phrase is used to encrypt the keys
	PassPhrase string `protobuf:"bytes,2,opt,name=pass_phrase,json=passPhrase,proto3" json:"pass_phrase,omitempty"`
	// description defines the description terms for the validator
	Description *types.Description `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate for the validator
	// TODO failed to use the customized type: github.com/cosmos/cosmos-sdk/types.Dec
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *CreateValidatorRequest) Reset() {
	*x = CreateValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidatorRequest) ProtoMessage() {}

func (x *CreateValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidatorRequest.ProtoReflect.Descriptor instead.
func (*CreateValidatorRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{2}
}

func (x *CreateValidatorRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *CreateValidatorRequest) GetPassPhrase() string {
	if x != nil {
		return x.PassPhrase
	}
	return ""
}

func (x *CreateValidatorRequest) GetDescription() *types.Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CreateValidatorRequest) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

type CreateValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// btc_pk is the hex string of BTC secp256k1 public key of the validator encoded in BIP-340 spec
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
}

func (x *CreateValidatorResponse) Reset() {
	*x = CreateValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidatorResponse) ProtoMessage() {}

func (x *CreateValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidatorResponse.ProtoReflect.Descriptor instead.
func (*CreateValidatorResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{3}
}

func (x *CreateValidatorResponse) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

type RegisterValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// btc_pk is hex string of the BTC secp256k1 public key of the validator encoded in BIP-340 spec
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
}

func (x *RegisterValidatorRequest) Reset() {
	*x = RegisterValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorRequest) ProtoMessage() {}

func (x *RegisterValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorRequest.ProtoReflect.Descriptor instead.
func (*RegisterValidatorRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterValidatorRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

type RegisterValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hash of the successful Babylon registration transaction
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *RegisterValidatorResponse) Reset() {
	*x = RegisterValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorResponse) ProtoMessage() {}

func (x *RegisterValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorResponse.ProtoReflect.Descriptor instead.
func (*RegisterValidatorResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterValidatorResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type AddFinalitySignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// babylon_pk is the Babylon secp256k1 PK of this BTC validator
	BabylonPk []byte `protobuf:"bytes,1,opt,name=babylon_pk,json=babylonPk,proto3" json:"babylon_pk,omitempty"`
	// height is the height of the Babylon block
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// last_commit_hash is the last commit hash of the Babylon block
	LastCommitHash []byte `protobuf:"bytes,3,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"`
}

func (x *AddFinalitySignatureRequest) Reset() {
	*x = AddFinalitySignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFinalitySignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFinalitySignatureRequest) ProtoMessage() {}

func (x *AddFinalitySignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFinalitySignatureRequest.ProtoReflect.Descriptor instead.
func (*AddFinalitySignatureRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{6}
}

func (x *AddFinalitySignatureRequest) GetBabylonPk() []byte {
	if x != nil {
		return x.BabylonPk
	}
	return nil
}

func (x *AddFinalitySignatureRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *AddFinalitySignatureRequest) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

type AddFinalitySignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hash of the successful Babylon finality signature submission transaction
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// the hex string of the extracted Bitcoin secp256k1 private key
	ExtractedSkHex string `protobuf:"bytes,2,opt,name=extracted_sk_hex,json=extractedSkHex,proto3" json:"extracted_sk_hex,omitempty"`
	// the hex string of the local Bitcoin secp256k1 private key
	LocalSkHex string `protobuf:"bytes,3,opt,name=local_sk_hex,json=localSkHex,proto3" json:"local_sk_hex,omitempty"`
}

func (x *AddFinalitySignatureResponse) Reset() {
	*x = AddFinalitySignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFinalitySignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFinalitySignatureResponse) ProtoMessage() {}

func (x *AddFinalitySignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFinalitySignatureResponse.ProtoReflect.Descriptor instead.
func (*AddFinalitySignatureResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{7}
}

func (x *AddFinalitySignatureResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *AddFinalitySignatureResponse) GetExtractedSkHex() string {
	if x != nil {
		return x.ExtractedSkHex
	}
	return ""
}

func (x *AddFinalitySignatureResponse) GetLocalSkHex() string {
	if x != nil {
		return x.LocalSkHex
	}
	return ""
}

type QueryValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// btc_pk is hex string of the BTC secp256k1 public key of the validator encoded in BIP-340 spec
	BtcPk string `protobuf:"bytes,1,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
}

func (x *QueryValidatorRequest) Reset() {
	*x = QueryValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorRequest) ProtoMessage() {}

func (x *QueryValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorRequest.ProtoReflect.Descriptor instead.
func (*QueryValidatorRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{8}
}

func (x *QueryValidatorRequest) GetBtcPk() string {
	if x != nil {
		return x.BtcPk
	}
	return ""
}

type QueryValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator *ValidatorInfo `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *QueryValidatorResponse) Reset() {
	*x = QueryValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorResponse) ProtoMessage() {}

func (x *QueryValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorResponse.ProtoReflect.Descriptor instead.
func (*QueryValidatorResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{9}
}

func (x *QueryValidatorResponse) GetValidator() *ValidatorInfo {
	if x != nil {
		return x.Validator
	}
	return nil
}

type QueryValidatorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryValidatorListRequest) Reset() {
	*x = QueryValidatorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorListRequest) ProtoMessage() {}

func (x *QueryValidatorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorListRequest.ProtoReflect.Descriptor instead.
func (*QueryValidatorListRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{10}
}

type QueryValidatorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*ValidatorInfo `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"` // TODO add pagination in case the list gets large
}

func (x *QueryValidatorListResponse) Reset() {
	*x = QueryValidatorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValidatorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValidatorListResponse) ProtoMessage() {}

func (x *QueryValidatorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValidatorListResponse.ProtoReflect.Descriptor instead.
func (*QueryValidatorListResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{11}
}

func (x *QueryValidatorListResponse) GetValidators() []*ValidatorInfo {
	if x != nil {
		return x.Validators
	}
	return nil
}

type StoreValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// babylon_pk is the Babylon secp256k1 PK of this BTC validator
	BabylonPk []byte `protobuf:"bytes,1,opt,name=babylon_pk,json=babylonPk,proto3" json:"babylon_pk,omitempty"`
	// btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
	BtcPk []byte `protobuf:"bytes,2,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// description defines the description terms for the validator
	Description *types.Description `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate for the validator
	// TODO failed to use the customized type: github.com/cosmos/cosmos-sdk/types.Dec
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	// pop is the proof of possession of babylon_pk and btc_pk
	Pop *ProofOfPossession `protobuf:"bytes,5,opt,name=pop,proto3" json:"pop,omitempty"`
	// key_name is the identifier of the keyring
	KeyName string `protobuf:"bytes,6,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// chain_id is the identifier of the consumer chain that the validator connected to
	ChainId string `protobuf:"bytes,7,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// last_voted_height defines the height of the last voted Babylon block
	LastVotedHeight uint64 `protobuf:"varint,8,opt,name=last_voted_height,json=lastVotedHeight,proto3" json:"last_voted_height,omitempty"`
	// last_committed_height defines the height of the last Babylon block
	// to which the validator committed a randomness pair
	LastCommittedHeight uint64 `protobuf:"varint,9,opt,name=last_committed_height,json=lastCommittedHeight,proto3" json:"last_committed_height,omitempty"`
	// last_processed_height defines the height of the last successfully processed block
	// even though the vote is not cast
	LastProcessedHeight uint64 `protobuf:"varint,10,opt,name=last_processed_height,json=lastProcessedHeight,proto3" json:"last_processed_height,omitempty"`
	// status defines the current validator status
	Status ValidatorStatus `protobuf:"varint,11,opt,name=status,proto3,enum=proto.ValidatorStatus" json:"status,omitempty"`
}

func (x *StoreValidator) Reset() {
	*x = StoreValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreValidator) ProtoMessage() {}

func (x *StoreValidator) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreValidator.ProtoReflect.Descriptor instead.
func (*StoreValidator) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{12}
}

func (x *StoreValidator) GetBabylonPk() []byte {
	if x != nil {
		return x.BabylonPk
	}
	return nil
}

func (x *StoreValidator) GetBtcPk() []byte {
	if x != nil {
		return x.BtcPk
	}
	return nil
}

func (x *StoreValidator) GetDescription() *types.Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *StoreValidator) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *StoreValidator) GetPop() *ProofOfPossession {
	if x != nil {
		return x.Pop
	}
	return nil
}

func (x *StoreValidator) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *StoreValidator) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *StoreValidator) GetLastVotedHeight() uint64 {
	if x != nil {
		return x.LastVotedHeight
	}
	return 0
}

func (x *StoreValidator) GetLastCommittedHeight() uint64 {
	if x != nil {
		return x.LastCommittedHeight
	}
	return 0
}

func (x *StoreValidator) GetLastProcessedHeight() uint64 {
	if x != nil {
		return x.LastProcessedHeight
	}
	return 0
}

func (x *StoreValidator) GetStatus() ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorStatus_CREATED
}

// ValidatorInfo is the basic information of a validator mainly for external usage
type ValidatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// babylon_pk_hex is the hex string of the Babylon secp256k1 PK of this BTC validator
	BabylonPkHex string `protobuf:"bytes,1,opt,name=babylon_pk_hex,json=babylonPkHex,proto3" json:"babylon_pk_hex,omitempty"`
	// btc_pk_hex is the hex string of the BTC secp256k1 PK of the validator encoded in BIP-340 spec
	BtcPkHex string `protobuf:"bytes,2,opt,name=btc_pk_hex,json=btcPkHex,proto3" json:"btc_pk_hex,omitempty"`
	// description defines the description terms for the validator
	Description *types.Description `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// commission defines the commission rate for the validator
	// TODO failed to use the customized type: github.com/cosmos/cosmos-sdk/types.Dec
	Commission string `protobuf:"bytes,4,opt,name=commission,proto3" json:"commission,omitempty"`
	// last_voted_height defines the height of the last voted Babylon block
	LastVotedHeight uint64 `protobuf:"varint,5,opt,name=last_voted_height,json=lastVotedHeight,proto3" json:"last_voted_height,omitempty"`
	// last_committed_height defines the height of the last Babylon block
	// to which the validator committed a randomness pair
	LastCommittedHeight uint64 `protobuf:"varint,6,opt,name=last_committed_height,json=lastCommittedHeight,proto3" json:"last_committed_height,omitempty"`
	// status defines the current validator status
	Status ValidatorStatus `protobuf:"varint,7,opt,name=status,proto3,enum=proto.ValidatorStatus" json:"status,omitempty"`
}

func (x *ValidatorInfo) Reset() {
	*x = ValidatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfo) ProtoMessage() {}

func (x *ValidatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfo.ProtoReflect.Descriptor instead.
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{13}
}

func (x *ValidatorInfo) GetBabylonPkHex() string {
	if x != nil {
		return x.BabylonPkHex
	}
	return ""
}

func (x *ValidatorInfo) GetBtcPkHex() string {
	if x != nil {
		return x.BtcPkHex
	}
	return ""
}

func (x *ValidatorInfo) GetDescription() *types.Description {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ValidatorInfo) GetCommission() string {
	if x != nil {
		return x.Commission
	}
	return ""
}

func (x *ValidatorInfo) GetLastVotedHeight() uint64 {
	if x != nil {
		return x.LastVotedHeight
	}
	return 0
}

func (x *ValidatorInfo) GetLastCommittedHeight() uint64 {
	if x != nil {
		return x.LastCommittedHeight
	}
	return 0
}

func (x *ValidatorInfo) GetStatus() ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorStatus_CREATED
}

// ProofOfPossession is the proof of possession that a Babylon secp256k1
// secret key and a Bitcoin secp256k1 secret key are held by the same
// person
type ProofOfPossession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// babylon_sig is the signature generated via sign(sk_babylon, pk_btc)
	BabylonSig []byte `protobuf:"bytes,1,opt,name=babylon_sig,json=babylonSig,proto3" json:"babylon_sig,omitempty"`
	// btc_sig is the signature generated via sign(sk_btc, babylon_sig)
	// the signature follows encoding in BIP-340 spec
	BtcSig []byte `protobuf:"bytes,2,opt,name=btc_sig,json=btcSig,proto3" json:"btc_sig,omitempty"`
}

func (x *ProofOfPossession) Reset() {
	*x = ProofOfPossession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOfPossession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOfPossession) ProtoMessage() {}

func (x *ProofOfPossession) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOfPossession.ProtoReflect.Descriptor instead.
func (*ProofOfPossession) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{14}
}

func (x *ProofOfPossession) GetBabylonSig() []byte {
	if x != nil {
		return x.BabylonSig
	}
	return nil
}

func (x *ProofOfPossession) GetBtcSig() []byte {
	if x != nil {
		return x.BtcSig
	}
	return nil
}

type SchnorrRandPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubRand []byte `protobuf:"bytes,1,opt,name=pub_rand,json=pubRand,proto3" json:"pub_rand,omitempty"`
	SecRand []byte `protobuf:"bytes,2,opt,name=sec_rand,json=secRand,proto3" json:"sec_rand,omitempty"`
}

func (x *SchnorrRandPair) Reset() {
	*x = SchnorrRandPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchnorrRandPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchnorrRandPair) ProtoMessage() {}

func (x *SchnorrRandPair) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchnorrRandPair.ProtoReflect.Descriptor instead.
func (*SchnorrRandPair) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{15}
}

func (x *SchnorrRandPair) GetPubRand() []byte {
	if x != nil {
		return x.PubRand
	}
	return nil
}

func (x *SchnorrRandPair) GetSecRand() []byte {
	if x != nil {
		return x.SecRand
	}
	return nil
}

var File_validators_proto protoreflect.FileDescriptor

var file_validators_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xf5, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x38, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x22, 0x31, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x22, 0x34, 0x0a, 0x19,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x7e, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x50, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x5f, 0x68, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x6b, 0x48, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x6b, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x6b, 0x48, 0x65, 0x78, 0x22, 0x2e, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x22, 0x4c, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x8d, 0x04, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x50, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x74, 0x63,
	0x5f, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x74, 0x63, 0x50, 0x6b,
	0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xda, 0xde, 0x1f,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x03, 0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50, 0x6f,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x62,
	0x79, 0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x50, 0x6b, 0x48, 0x65, 0x78, 0x12,
	0x1c, 0x0a, 0x0a, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x6b, 0x5f, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x74, 0x63, 0x50, 0x6b, 0x48, 0x65, 0x78, 0x12, 0x45, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x74, 0x63, 0x53, 0x69, 0x67, 0x22, 0x47, 0x0a,
	0x0f, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x75, 0x62, 0x52, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x2a, 0x9f, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0b, 0x8a, 0x9d, 0x20, 0x07, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0x8a, 0x9d, 0x20, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x4c, 0x41, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0b, 0x8a, 0x9d, 0x20, 0x07, 0x53, 0x4c, 0x41, 0x53, 0x48,
	0x45, 0x44, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x32, 0xfe, 0x03, 0x0a, 0x0d, 0x42, 0x74, 0x63,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x62, 0x74, 0x63, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_validators_proto_rawDescOnce sync.Once
	file_validators_proto_rawDescData = file_validators_proto_rawDesc
)

func file_validators_proto_rawDescGZIP() []byte {
	file_validators_proto_rawDescOnce.Do(func() {
		file_validators_proto_rawDescData = protoimpl.X.CompressGZIP(file_validators_proto_rawDescData)
	})
	return file_validators_proto_rawDescData
}

var file_validators_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_validators_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_validators_proto_goTypes = []interface{}{
	(ValidatorStatus)(0),                 // 0: proto.ValidatorStatus
	(*GetInfoRequest)(nil),               // 1: proto.GetInfoRequest
	(*GetInfoResponse)(nil),              // 2: proto.GetInfoResponse
	(*CreateValidatorRequest)(nil),       // 3: proto.CreateValidatorRequest
	(*CreateValidatorResponse)(nil),      // 4: proto.CreateValidatorResponse
	(*RegisterValidatorRequest)(nil),     // 5: proto.RegisterValidatorRequest
	(*RegisterValidatorResponse)(nil),    // 6: proto.RegisterValidatorResponse
	(*AddFinalitySignatureRequest)(nil),  // 7: proto.AddFinalitySignatureRequest
	(*AddFinalitySignatureResponse)(nil), // 8: proto.AddFinalitySignatureResponse
	(*QueryValidatorRequest)(nil),        // 9: proto.QueryValidatorRequest
	(*QueryValidatorResponse)(nil),       // 10: proto.QueryValidatorResponse
	(*QueryValidatorListRequest)(nil),    // 11: proto.QueryValidatorListRequest
	(*QueryValidatorListResponse)(nil),   // 12: proto.QueryValidatorListResponse
	(*StoreValidator)(nil),               // 13: proto.StoreValidator
	(*ValidatorInfo)(nil),                // 14: proto.ValidatorInfo
	(*ProofOfPossession)(nil),            // 15: proto.ProofOfPossession
	(*SchnorrRandPair)(nil),              // 16: proto.SchnorrRandPair
	(*types.Description)(nil),            // 17: cosmos.staking.v1beta1.Description
}
var file_validators_proto_depIdxs = []int32{
	17, // 0: proto.CreateValidatorRequest.description:type_name -> cosmos.staking.v1beta1.Description
	14, // 1: proto.QueryValidatorResponse.validator:type_name -> proto.ValidatorInfo
	14, // 2: proto.QueryValidatorListResponse.validators:type_name -> proto.ValidatorInfo
	17, // 3: proto.StoreValidator.description:type_name -> cosmos.staking.v1beta1.Description
	15, // 4: proto.StoreValidator.pop:type_name -> proto.ProofOfPossession
	0,  // 5: proto.StoreValidator.status:type_name -> proto.ValidatorStatus
	17, // 6: proto.ValidatorInfo.description:type_name -> cosmos.staking.v1beta1.Description
	0,  // 7: proto.ValidatorInfo.status:type_name -> proto.ValidatorStatus
	1,  // 8: proto.BtcValidators.GetInfo:input_type -> proto.GetInfoRequest
	3,  // 9: proto.BtcValidators.CreateValidator:input_type -> proto.CreateValidatorRequest
	5,  // 10: proto.BtcValidators.RegisterValidator:input_type -> proto.RegisterValidatorRequest
	7,  // 11: proto.BtcValidators.AddFinalitySignature:input_type -> proto.AddFinalitySignatureRequest
	9,  // 12: proto.BtcValidators.QueryValidator:input_type -> proto.QueryValidatorRequest
	11, // 13: proto.BtcValidators.QueryValidatorList:input_type -> proto.QueryValidatorListRequest
	2,  // 14: proto.BtcValidators.GetInfo:output_type -> proto.GetInfoResponse
	4,  // 15: proto.BtcValidators.CreateValidator:output_type -> proto.CreateValidatorResponse
	6,  // 16: proto.BtcValidators.RegisterValidator:output_type -> proto.RegisterValidatorResponse
	8,  // 17: proto.BtcValidators.AddFinalitySignature:output_type -> proto.AddFinalitySignatureResponse
	10, // 18: proto.BtcValidators.QueryValidator:output_type -> proto.QueryValidatorResponse
	12, // 19: proto.BtcValidators.QueryValidatorList:output_type -> proto.QueryValidatorListResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_validators_proto_init() }
func file_validators_proto_init() {
	if File_validators_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validators_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFinalitySignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFinalitySignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValidatorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOfPossession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchnorrRandPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validators_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_validators_proto_goTypes,
		DependencyIndexes: file_validators_proto_depIdxs,
		EnumInfos:         file_validators_proto_enumTypes,
		MessageInfos:      file_validators_proto_msgTypes,
	}.Build()
	File_validators_proto = out.File
	file_validators_proto_rawDesc = nil
	file_validators_proto_goTypes = nil
	file_validators_proto_depIdxs = nil
}
