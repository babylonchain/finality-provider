diff --git a/.circleci/config.yml b/.circleci/config.yml
index 7bc24a8..ceb9500 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -18,7 +18,6 @@ jobs:
           command: "go env"
       - go/load-cache:
           key: go-mod-v6-{{ checksum "go.sum" }}
-      - add_ssh_keys
       - go/mod-download
       - go/save-cache:
           key: go-mod-v6-{{ checksum "go.sum" }}
@@ -46,7 +45,6 @@ jobs:
       resource_class: large
     steps:
       - checkout
-      - add_ssh_keys
       - aws-ecr/build-image:
           push-image: false
           dockerfile: Dockerfile
@@ -54,7 +52,6 @@ jobs:
           build-path: ./
           tag: "$CIRCLE_SHA1,$CIRCLE_TAG"
           repo: "$CIRCLE_PROJECT_REPONAME"
-          extra-build-args: "--secret id=sshKey,src=/home/circleci/.ssh/$DEPLOY_KEY_NAME"
       - run:
           name: Save Docker image to export it to workspace
           command: |
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 1f13759..8cf408e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,25 +1,5 @@
 # Changelog
 
-## [euphrates-0.1.0-rc.0](https://github.com/babylonchain/finality-provider/tree/euphrates-0.1.0-rc.0) (2024-03-25)
-
-[Full Changelog](https://github.com/babylonchain/finality-provider/compare/v0.1.0...euphrates-0.1.0-rc.0)
-
-**Closed issues:**
-
-- Consumer chain finality provider [\#276](https://github.com/babylonchain/finality-provider/issues/276)
-- eotsd init panics [\#266](https://github.com/babylonchain/finality-provider/issues/266)
-- DB needs refactoring [\#252](https://github.com/babylonchain/finality-provider/issues/252)
-- failed to register the finality-provider to Babylon: error in json rpc client [\#249](https://github.com/babylonchain/finality-provider/issues/249)
-- `fpcli ls` should return all the managed fps with different status [\#244](https://github.com/babylonchain/finality-provider/issues/244)
-- Change the default parameters to ones used in a stable devnet [\#230](https://github.com/babylonchain/finality-provider/issues/230)
-- Crash recovery potentially causes inconsistent state [\#196](https://github.com/babylonchain/finality-provider/issues/196)
-- Command for collecting finality provider rewards [\#176](https://github.com/babylonchain/finality-provider/issues/176)
-- Drop blocks when a block channel of a validator gets full [\#72](https://github.com/babylonchain/finality-provider/issues/72)
-
-**Fixed bugs:**
-
-- Finality provider status `CREATED` is not changed to `REGISTERED` in some cases [\#253](https://github.com/babylonchain/finality-provider/issues/253)
-
 ## [v0.1.0](https://github.com/babylonchain/finality-provider/tree/v0.1.0) (2024-02-08)
 
 [Full Changelog](https://github.com/babylonchain/finality-provider/compare/v0.1.0-rc.0...v0.1.0)
diff --git a/Dockerfile b/Dockerfile
index db458b6..dd5a7b2 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -12,15 +12,11 @@ RUN apk add --no-cache --update openssh git make build-base linux-headers libc-d
                                 libzmq-static libsodium-static gcc
 
 
-RUN mkdir -p /root/.ssh && ssh-keyscan github.com >> /root/.ssh/known_hosts
-RUN git config --global url."git@github.com:".insteadOf "https://github.com/"
-ENV GOPRIVATE=github.com/babylonchain/*
-
 # Build
 WORKDIR /go/src/github.com/babylonchain/finality-provider
 # Cache dependencies
 COPY go.mod go.sum /go/src/github.com/babylonchain/finality-provider/
-RUN --mount=type=secret,id=sshKey,target=/root/.ssh/id_rsa go mod download
+RUN go mod download
 # Copy the rest of the files
 COPY ./ /go/src/github.com/babylonchain/finality-provider/
 
diff --git a/Makefile b/Makefile
index 607a0bc..c8d6b32 100644
--- a/Makefile
+++ b/Makefile
@@ -49,7 +49,7 @@ $(BUILDDIR)/:
 	mkdir -p $(BUILDDIR)/
 
 build-docker:
-	$(DOCKER) build --secret id=sshKey,src=${BBN_PRIV_DEPLOY_KEY} --tag babylonchain/finality-provider -f Dockerfile \
+	$(DOCKER) build --tag babylonchain/finality-provider -f Dockerfile \
 		$(shell git rev-parse --show-toplevel)
 
 .PHONY: build build-docker
diff --git a/clientcontroller/babylon.go b/clientcontroller/babylon.go
index 60c1c23..e37abfa 100644
--- a/clientcontroller/babylon.go
+++ b/clientcontroller/babylon.go
@@ -14,10 +14,12 @@ import (
 	btcctypes "github.com/babylonchain/babylon/x/btccheckpoint/types"
 	btclctypes "github.com/babylonchain/babylon/x/btclightclient/types"
 	btcstakingtypes "github.com/babylonchain/babylon/x/btcstaking/types"
+<<<<<<< HEAD
+=======
 	bsctypes "github.com/babylonchain/babylon/x/btcstkconsumer/types"
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 	ckpttypes "github.com/babylonchain/babylon/x/checkpointing/types"
 	finalitytypes "github.com/babylonchain/babylon/x/finality/types"
-	"github.com/btcsuite/btcd/btcec/v2"
 	"github.com/btcsuite/btcd/btcec/v2/schnorr"
 	"github.com/btcsuite/btcd/chaincfg"
 	"github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
@@ -113,7 +115,6 @@ func (bc *BabylonController) reliablySendMsgs(msgs []sdk.Msg, expectedErrs []*sd
 // RegisterFinalityProvider registers a finality provider via a MsgCreateFinalityProvider to Babylon
 // it returns tx hash, registered epoch, and error
 func (bc *BabylonController) RegisterFinalityProvider(
-	consumerID string,
 	chainPk []byte,
 	fpPk *btcec.PublicKey,
 	pop []byte,
@@ -139,7 +140,10 @@ func (bc *BabylonController) RegisterFinalityProvider(
 		Commission:    commission,
 		Description:   &sdkDescription,
 		MasterPubRand: masterPubRand,
-		ConsumerId:    consumerID,
+<<<<<<< HEAD
+=======
+		// TODO: gurjot check here
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 	}
 
 	res, err := bc.reliablySendMsg(msg, emptyErrs, emptyErrs)
@@ -558,6 +562,8 @@ func (bc *BabylonController) InsertSpvProofs(submitter string, proofs []*btcctyp
 	msg := &btcctypes.MsgInsertBTCSpvProof{
 		Submitter: submitter,
 		Proofs:    proofs,
+<<<<<<< HEAD
+=======
 	}
 
 	res, err := bc.reliablySendMsg(msg, emptyErrs, emptyErrs)
@@ -570,11 +576,12 @@ func (bc *BabylonController) InsertSpvProofs(submitter string, proofs []*btcctyp
 
 // RegisterConsumerChain registers a consumer chain via a MsgRegisterChain to Babylon
 func (bc *BabylonController) RegisterConsumerChain(id, name, description string) (*types.TxResponse, error) {
-	msg := &bsctypes.MsgRegisterConsumer{
-		Signer:              bc.mustGetTxSigner(),
-		ConsumerId:          id,
-		ConsumerName:        name,
-		ConsumerDescription: description,
+	msg := &bsctypes.MsgRegisterChain{
+		Signer:           bc.mustGetTxSigner(),
+		ChainId:          id,
+		ChainName:        name,
+		ChainDescription: description,
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 	}
 
 	res, err := bc.reliablySendMsg(msg, emptyErrs, emptyErrs)
@@ -582,5 +589,5 @@ func (bc *BabylonController) RegisterConsumerChain(id, name, description string)
 		return nil, err
 	}
 
-	return &types.TxResponse{TxHash: res.TxHash, Events: res.Events}, nil
+	return res, nil
 }
diff --git a/clientcontroller/interface.go b/clientcontroller/interface.go
index da12191..f6597c2 100644
--- a/clientcontroller/interface.go
+++ b/clientcontroller/interface.go
@@ -21,7 +21,6 @@ type ClientController interface {
 	// RegisterFinalityProvider registers a finality provider to the consumer chain
 	// it returns tx hash and error
 	RegisterFinalityProvider(
-		consumerID string,
 		chainPk []byte,
 		fpPk *btcec.PublicKey,
 		pop []byte,
diff --git a/finality-provider/service/app.go b/finality-provider/service/app.go
index 0d5a573..90aa16c 100644
--- a/finality-provider/service/app.go
+++ b/finality-provider/service/app.go
@@ -10,7 +10,6 @@ import (
 	sdkmath "cosmossdk.io/math"
 	bbntypes "github.com/babylonchain/babylon/types"
 	bstypes "github.com/babylonchain/babylon/x/btcstaking/types"
-	"github.com/btcsuite/btcd/btcec/v2"
 	"github.com/cosmos/cosmos-sdk/crypto/keyring"
 	"github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
 	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
@@ -141,10 +140,6 @@ func (app *FinalityProviderApp) ListFinalityProviderInstances() []*FinalityProvi
 	return app.fpManager.ListFinalityProviderInstances()
 }
 
-func (app *FinalityProviderApp) ListFinalityProviderInstancesForChain(chainID string) []*FinalityProviderInstance {
-	return app.fpManager.ListFinalityProviderInstancesForChain(chainID)
-}
-
 func (app *FinalityProviderApp) ListAllFinalityProvidersInfo() ([]*proto.FinalityProviderInfo, error) {
 	return app.fpManager.AllFinalityProviders()
 }
@@ -185,7 +180,6 @@ func (app *FinalityProviderApp) RegisterFinalityProvider(fpPkStr string) (*Regis
 	}
 
 	request := &registerFinalityProviderRequest{
-		consumerID:      fp.ChainID,
 		bbnPubKey:       fp.ChainPk,
 		btcPubKey:       bbntypes.NewBIP340PubKeyFromBTCPK(fp.BtcPk),
 		pop:             pop,
@@ -539,15 +533,21 @@ func (app *FinalityProviderApp) registrationLoop() {
 				req.errResponse <- err
 				continue
 			}
+<<<<<<< HEAD
+=======
 
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 			res, registeredEpoch, err := app.cc.RegisterFinalityProvider(
-				req.consumerID,
 				req.bbnPubKey.Key,
 				req.btcPubKey.MustToBTCPK(),
 				popBytes,
 				req.commission,
 				desBytes,
 				req.masterPubRand,
+<<<<<<< HEAD
+=======
+				req.chainID, // todo: gurjot check here
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 			)
 
 			if err != nil {
diff --git a/finality-provider/service/app_test.go b/finality-provider/service/app_test.go
index 063f7c5..69ebd01 100644
--- a/finality-provider/service/app_test.go
+++ b/finality-provider/service/app_test.go
@@ -100,7 +100,6 @@ func FuzzRegisterFinalityProvider(f *testing.F) {
 		txHash := testutil.GenRandomHexStr(r, 32)
 		mockClientController.EXPECT().
 			RegisterFinalityProvider(
-				fp.ChainID,
 				fp.ChainPk.Key,
 				fp.BtcPk,
 				popBytes,
diff --git a/finality-provider/service/fp_instance.go b/finality-provider/service/fp_instance.go
index 49a3fdf..55db8c1 100644
--- a/finality-provider/service/fp_instance.go
+++ b/finality-provider/service/fp_instance.go
@@ -471,6 +471,158 @@ func (fp *FinalityProviderInstance) checkBlockFinalization(height uint64) (bool,
 	return b.Finalized, nil
 }
 
+<<<<<<< HEAD
+=======
+<<<<<<< HEAD
+// retryCommitPubRandUntilBlockFinalized periodically tries to commit public rand until success or the block is finalized
+// error will be returned if maximum retries have been reached or the query to the consumer chain fails
+func (fp *FinalityProviderInstance) retryCommitPubRandUntilBlockFinalized(targetBlock *types.BlockInfo) (*types.TxResponse, error) {
+	var failedCycles uint32
+
+	// we break the for loop if the block is finalized or the public rand is successfully committed
+	// error will be returned if maximum retries have been reached or the query to the consumer chain fails
+	for {
+		// error will be returned if max retries have been reached
+		res, err := fp.CommitPubRand(targetBlock)
+		if err != nil {
+			if clientcontroller.IsUnrecoverable(err) {
+				return nil, err
+			}
+			fp.logger.Debug(
+				"failed to commit public randomness to the consumer chain",
+				zap.String("pk", fp.GetBtcPkHex()),
+				zap.Uint32("current_failures", failedCycles),
+				zap.Uint64("target_block_height", targetBlock.Height),
+				zap.Error(err),
+			)
+
+			failedCycles += 1
+			if failedCycles > uint32(fp.cfg.MaxSubmissionRetries) {
+				return nil, fmt.Errorf("reached max failed cycles with err: %w", err)
+			}
+		} else {
+			// the public randomness has been successfully submitted
+			return res, nil
+		}
+		select {
+		case <-time.After(fp.cfg.SubmissionRetryInterval):
+			// periodically query the index block to be later checked whether it is Finalized
+			finalized, err := fp.checkBlockFinalization(targetBlock.Height)
+			if err != nil {
+				return nil, fmt.Errorf("failed to query block finalization at height %v: %w", targetBlock.Height, err)
+			}
+			if finalized {
+				fp.logger.Debug(
+					"the block is already finalized, skip submission",
+					zap.String("pk", fp.GetBtcPkHex()),
+					zap.Uint64("target_height", targetBlock.Height),
+				)
+				// TODO: returning nil here is to safely break the loop
+				//  the error still exists
+				return nil, nil
+			}
+
+		case <-fp.quit:
+			fp.logger.Debug("the finality-provider instance is closing", zap.String("pk", fp.GetBtcPkHex()))
+			return nil, nil
+		}
+	}
+}
+
+// CommitPubRand generates a list of Schnorr rand pairs,
+// commits the public randomness for the managed finality providers,
+// and save the randomness pair to DB
+func (fp *FinalityProviderInstance) CommitPubRand(tipBlock *types.BlockInfo) (*types.TxResponse, error) {
+	lastCommittedHeight, err := fp.GetLastCommittedHeight()
+	if err != nil {
+		return nil, err
+	}
+
+	var startHeight uint64
+	if lastCommittedHeight == uint64(0) {
+		// the finality-provider has never submitted public rand before
+		startHeight = tipBlock.Height + 1
+		// should not use subtraction because they are in the type of uint64
+	} else if lastCommittedHeight < fp.cfg.MinRandHeightGap+tipBlock.Height {
+		// we are running out of the randomness
+		startHeight = lastCommittedHeight + 1
+	} else {
+		fp.logger.Debug(
+			"the finality-provider has sufficient public randomness, skip committing more",
+			zap.String("pk", fp.GetBtcPkHex()),
+			zap.Uint64("block_height", tipBlock.Height),
+			zap.Uint64("last_committed_height", lastCommittedHeight),
+		)
+		return nil, nil
+	}
+
+	// generate a list of Schnorr randomness pairs
+	// NOTE: currently, calling this will create and save a list of randomness
+	// in case of failure, randomness that has been created will be overwritten
+	// for safety reason as the same randomness must not be used twice
+	// TODO: should consider an implementation that deterministically create
+	//  randomness without saving it
+	pubRandList, err := fp.createPubRandList(startHeight)
+	if err != nil {
+		return nil, fmt.Errorf("failed to generate randomness: %w", err)
+	}
+
+	// get the message hash for signing
+	msg := &ftypes.MsgCommitPubRandList{
+		FpBtcPk:     fp.btcPk,
+		StartHeight: startHeight,
+		PubRandList: pubRandList,
+	}
+	hash, err := msg.HashToSign()
+	if err != nil {
+		return nil, fmt.Errorf("failed to sign the commit public randomness message: %w", err)
+	}
+
+	// sign the message hash using the finality-provider's BTC private key
+	schnorrSig, err := fp.em.SignSchnorrSig(fp.btcPk.MustMarshal(), hash, fp.passphrase)
+	if err != nil {
+		return nil, fmt.Errorf("failed to sign the Schnorr signature: %w", err)
+	}
+
+	pubRandByteList := make([]*btcec.FieldVal, 0, len(pubRandList))
+	for _, r := range pubRandList {
+		pubRandByteList = append(pubRandByteList, r.ToFieldVal())
+	}
+	res, err := fp.cc.CommitPubRandList(fp.GetBtcPk(), startHeight, pubRandByteList, schnorrSig)
+	if err != nil {
+		// TODO Add retry. check issue: https://github.com/babylonchain/finality-provider/issues/34
+		return nil, fmt.Errorf("failed to commit public randomness to the consumer chain: %w", err)
+	}
+
+	// Update metrics
+	fp.metrics.RecordFpRandomnessTime(fp.GetBtcPkHex())
+	fp.metrics.RecordFpLastCommittedRandomnessHeight(fp.GetBtcPkHex(), lastCommittedHeight)
+	fp.metrics.AddToFpTotalCommittedRandomness(fp.GetBtcPkHex(), float64(len(pubRandList)))
+
+	return res, nil
+}
+
+func (fp *FinalityProviderInstance) createPubRandList(startHeight uint64) ([]bbntypes.SchnorrPubRand, error) {
+	pubRandList, err := fp.em.CreateRandomnessPairList(
+		fp.btcPk.MustMarshal(),
+		[]byte(fp.GetChainID()),
+		startHeight,
+		uint32(fp.cfg.NumPubRand),
+		fp.passphrase,
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	schnorrPubRandList := make([]bbntypes.SchnorrPubRand, 0, len(pubRandList))
+	for _, pr := range pubRandList {
+		schnorrPubRandList = append(schnorrPubRandList, *bbntypes.NewSchnorrPubRandFromFieldVal(pr))
+	}
+
+	return schnorrPubRandList, nil
+}
+
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 // SubmitFinalitySignature builds and sends a finality signature over the given block to the consumer chain
 func (fp *FinalityProviderInstance) SubmitFinalitySignature(b *types.BlockInfo) (*types.TxResponse, error) {
 	eotsSig, err := fp.signEotsSig(b)
@@ -531,7 +683,7 @@ func (fp *FinalityProviderInstance) signEotsSig(b *types.BlockInfo) (*bbntypes.S
 		BlockAppHash: b.Hash,
 	}
 	msgToSign := msg.MsgToSign()
-	sig, err := fp.em.SignEOTS(fp.btcPk.MustMarshal(), []byte(fp.GetChainID()), msgToSign, b.Height, fp.passphrase)
+	sig, err := fp.em.SignEOTS(fp.btcPk.MustMarshal(), fp.GetChainID(), msgToSign, b.Height, fp.passphrase)
 	if err != nil {
 		return nil, fmt.Errorf("failed to sign EOTS: %w", err)
 	}
diff --git a/finality-provider/service/fp_manager.go b/finality-provider/service/fp_manager.go
index 61a5813..03fef45 100644
--- a/finality-provider/service/fp_manager.go
+++ b/finality-provider/service/fp_manager.go
@@ -293,20 +293,6 @@ func (fpm *FinalityProviderManager) ListFinalityProviderInstances() []*FinalityP
 	return fpisList
 }
 
-func (fpm *FinalityProviderManager) ListFinalityProviderInstancesForChain(chainID string) []*FinalityProviderInstance {
-	fpm.mu.Lock()
-	defer fpm.mu.Unlock()
-
-	fpisList := make([]*FinalityProviderInstance, 0, len(fpm.fpis))
-	for _, fpi := range fpm.fpis {
-		if string(fpi.GetChainID()) == chainID {
-			fpisList = append(fpisList, fpi)
-		}
-	}
-
-	return fpisList
-}
-
 func (fpm *FinalityProviderManager) AllFinalityProviders() ([]*proto.FinalityProviderInfo, error) {
 	storedFps, err := fpm.fps.GetAllStoredFinalityProviders()
 	if err != nil {
diff --git a/finality-provider/service/types.go b/finality-provider/service/types.go
index 33c18a2..41b7208 100644
--- a/finality-provider/service/types.go
+++ b/finality-provider/service/types.go
@@ -6,7 +6,6 @@ import (
 	sdkmath "cosmossdk.io/math"
 	bbntypes "github.com/babylonchain/babylon/types"
 	btcstakingtypes "github.com/babylonchain/babylon/x/btcstaking/types"
-	"github.com/btcsuite/btcd/btcec/v2"
 	"github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
 	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
 	"go.uber.org/zap"
@@ -32,9 +31,8 @@ type createFinalityProviderRequest struct {
 }
 
 type registerFinalityProviderRequest struct {
-	consumerID string
-	bbnPubKey  *secp256k1.PubKey
-	btcPubKey  *bbntypes.BIP340PubKey
+	bbnPubKey *secp256k1.PubKey
+	btcPubKey *bbntypes.BIP340PubKey
 	// TODO we should have our own representation of PoP
 	pop             *btcstakingtypes.ProofOfPossession
 	description     *stakingtypes.Description
@@ -126,7 +124,11 @@ func (fp *FinalityProviderInstance) GetLastProcessedHeight() uint64 {
 }
 
 func (fp *FinalityProviderInstance) GetChainID() []byte {
+<<<<<<< HEAD
+	return types.MarshalChainID(fp.state.getStoreFinalityProvider().ChainID)
+=======
 	return types.MarshalChainID(fp.state.getStoreFinalityProvider().ChainID) //todo gurjot check here
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 }
 
 func (fp *FinalityProviderInstance) SetStatus(s proto.FinalityProviderStatus) error {
diff --git a/go.mod b/go.mod
index a9bf9cc..4620190 100644
--- a/go.mod
+++ b/go.mod
@@ -302,7 +302,6 @@ require (
 replace (
 	// use cosmos fork of keyring
 	github.com/99designs/keyring => github.com/cosmos/keyring v1.2.0
-	github.com/babylonchain/babylon => github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394
 	github.com/gogo/protobuf => github.com/regen-network/protobuf v1.3.3-alpha.regen.1
 	github.com/syndtr/goleveldb => github.com/syndtr/goleveldb v1.0.1-0.20210819022825-2ae1ddf74ef7
 )
diff --git a/go.sum b/go.sum
index 8fafe35..4fbc139 100644
--- a/go.sum
+++ b/go.sum
@@ -281,8 +281,8 @@ github.com/aws/aws-sdk-go v1.44.122/go.mod h1:y4AeaBuwd2Lk+GepC1E9v0qOiTws0MIWAX
 github.com/aws/aws-sdk-go v1.44.312 h1:llrElfzeqG/YOLFFKjg1xNpZCFJ2xraIi3PqSuP+95k=
 github.com/aws/aws-sdk-go v1.44.312/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=
 github.com/aws/aws-sdk-go-v2 v0.18.0/go.mod h1:JWVYvqSMppoMJC0x5wdwiImzgXTI9FuZwxzkQq9wy+g=
-github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394 h1:nEznkFhJ51TMHOqhCvzgDGrlTni5ce/8sbfDJw9lHkw=
-github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394/go.mod h1:Ku+LtNN6bPMU3H58PiTiFvIWUvEcASigN7kQP87Eg/o=
+github.com/babylonchain/babylon v0.8.6-0.20240416015120-ffeb9c5b930b h1:HfjAGZiebrcInFAq8Lk8MXbKbtTYxRoO65vfLPOCXzw=
+github.com/babylonchain/babylon v0.8.6-0.20240416015120-ffeb9c5b930b/go.mod h1:lfeASLNJgcUsX7LEns3HRUv0k+MjzcB2q2AMasfz38M=
 github.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
diff --git a/itest/e2e_test.go b/itest/e2e_test.go
index fd59903..44cde78 100644
--- a/itest/e2e_test.go
+++ b/itest/e2e_test.go
@@ -187,16 +187,3 @@ func TestFastSync(t *testing.T) {
 	require.NoError(t, err)
 	require.True(t, currentHeight < finalizedHeight+uint64(n))
 }
-
-// TestConsumerFinalityProviderRegistration tests finality-provider registration for a consumer chain
-func TestConsumerFinalityProviderRegistration(t *testing.T) {
-	tm, _, _ := StartManagerWithFinalityProvider(t, 1)
-	defer tm.Stop(t)
-
-	consumerChainID := "consumer-chain-test-1"
-
-	_, err := tm.BBNClient.RegisterConsumerChain(consumerChainID, "Consumer chain 1 (test)", "Test Consumer Chain 1")
-	require.NoError(t, err)
-
-	tm.CreateFinalityProvidersForChain(t, consumerChainID, 1)
-}
diff --git a/itest/test_manager.go b/itest/test_manager.go
index 4fde53b..1114ed9 100644
--- a/itest/test_manager.go
+++ b/itest/test_manager.go
@@ -20,7 +20,10 @@ import (
 	btclctypes "github.com/babylonchain/babylon/x/btclightclient/types"
 	bstypes "github.com/babylonchain/babylon/x/btcstaking/types"
 	ckpttypes "github.com/babylonchain/babylon/x/checkpointing/types"
+<<<<<<< HEAD
 	"github.com/btcsuite/btcd/btcec/v2"
+=======
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 	"github.com/btcsuite/btcd/btcutil"
 	"github.com/btcsuite/btcd/chaincfg"
 	"github.com/btcsuite/btcd/wire"
@@ -46,6 +49,7 @@ var (
 
 	fpNamePrefix  = "test-fp-"
 	monikerPrefix = "moniker-"
+	chainID       = "chain-test"
 	passphrase    = "testpass"
 	hdPath        = ""
 	simnetParams  = &chaincfg.SimNetParams
@@ -151,35 +155,36 @@ func (tm *TestManager) WaitForServicesStart(t *testing.T) {
 
 func StartManagerWithFinalityProvider(t *testing.T, n int) (*TestManager, []*service.FinalityProviderInstance, uint64) {
 	tm := StartManager(t)
+<<<<<<< HEAD
+=======
 
-	fpInsList, registeredEpoch := tm.CreateFinalityProviders(t, n)
+	fpInsList := tm.CreateFinalityProviders(t, n)
 
 	require.Equal(t, n, len(fpInsList))
 	t.Logf("the test manager is running with %v finality-provider(s)", len(fpInsList))
-	
-	return tm, fpInsList, registeredEpoch
-}
-
-func (tm *TestManager) CreateFinalityProviders(t *testing.T, n int) ([]*service.FinalityProviderInstance, uint64) {
-	app := tm.Fpa
-	cfg := app.GetConfig()
 
-	return tm.CreateFinalityProvidersForChain(t, cfg.BabylonConfig.ChainID, n)
+	// todo: gurjot check here
+	return tm, fpInsList
 }
 
-func (tm *TestManager) CreateFinalityProvidersForChain(t *testing.T, chainID string, n int) ([]*service.FinalityProviderInstance, uint64) {
+func (tm *TestManager) CreateFinalityProviders(t *testing.T, n int) []*service.FinalityProviderInstance {
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 	app := tm.Fpa
-	cfg := app.GetConfig()
 
 	// register all finality providers
 	registeredEpoch := uint64(0)
 	fpPKs := make([]*bbntypes.BIP340PubKey, 0, n)
 	for i := 0; i < n; i++ {
-		fpName := fpNamePrefix + chainID + "-" + strconv.Itoa(i)
-		moniker := monikerPrefix + chainID + "-" + strconv.Itoa(i)
+		fpName := fpNamePrefix + strconv.Itoa(i)
+		moniker := monikerPrefix + strconv.Itoa(i)
 		commission := sdkmath.LegacyZeroDec()
 		desc := newDescription(moniker)
+<<<<<<< HEAD
+		cfg := app.GetConfig()
+		_, err := service.CreateChainKey(cfg.BabylonConfig.KeyDirectory, cfg.BabylonConfig.ChainID, fpName, keyring.BackendTest, passphrase, hdPath, "")
+=======
 		_, err := service.CreateChainKey(cfg.BabylonConfig.KeyDirectory, chainID, fpName, keyring.BackendTest, passphrase, hdPath, "")
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
 		require.NoError(t, err)
 		res, err := app.CreateFinalityProvider(fpName, chainID, passphrase, hdPath, desc, &commission)
 		require.NoError(t, err)
@@ -204,10 +209,36 @@ func (tm *TestManager) CreateFinalityProvidersForChain(t *testing.T, chainID str
 		require.NoError(t, err)
 	}
 
-	fpInsList := app.ListFinalityProviderInstancesForChain(chainID)
+	// check finality providers on Babylon side
+	require.Eventually(t, func() bool {
+		fps, err := tm.BBNClient.QueryFinalityProviders()
+		if err != nil {
+			t.Logf("failed to query finality providers from Babylon %s", err.Error())
+			return false
+		}
+
+		if len(fps) != n {
+			return false
+		}
+
+		for _, fp := range fps {
+			if !strings.Contains(fp.Description.Moniker, monikerPrefix) {
+				return false
+			}
+			if !fp.Commission.Equal(sdkmath.LegacyZeroDec()) {
+				return false
+			}
+		}
+
+		return true
+	}, eventuallyWaitTimeOut, eventuallyPollTime)
+
+	fpInsList := app.ListFinalityProviderInstances()
 	require.Equal(t, n, len(fpInsList))
 
-	return fpInsList, registeredEpoch
+	t.Logf("the test manager is running with %v finality-provider(s)", len(fpInsList))
+
+	return tm, fpInsList, registeredEpoch
 }
 
 func (tm *TestManager) Stop(t *testing.T) {
diff --git a/testutil/mocks/babylon.go b/testutil/mocks/babylon.go
index ca85845..87a8686 100644
--- a/testutil/mocks/babylon.go
+++ b/testutil/mocks/babylon.go
@@ -171,9 +171,9 @@ func (mr *MockClientControllerMockRecorder) QueryLatestFinalizedBlocks(count int
 }
 
 // RegisterFinalityProvider mocks base method.
-func (m *MockClientController) RegisterFinalityProvider(consumerID string, chainPk []byte, fpPk *btcec.PublicKey, pop []byte, commission *math.LegacyDec, description []byte, masterPubRand string) (*types.TxResponse, uint64, error) {
+func (m *MockClientController) RegisterFinalityProvider(chainPk []byte, fpPk *btcec.PublicKey, pop []byte, commission *math.LegacyDec, description []byte, masterPubRand string) (*types.TxResponse, uint64, error) {
 	m.ctrl.T.Helper()
-	ret := m.ctrl.Call(m, "RegisterFinalityProvider", consumerID, chainPk, fpPk, pop, commission, description, masterPubRand)
+	ret := m.ctrl.Call(m, "RegisterFinalityProvider", chainPk, fpPk, pop, commission, description, masterPubRand)
 	ret0, _ := ret[0].(*types.TxResponse)
 	ret1, _ := ret[1].(uint64)
 	ret2, _ := ret[2].(error)
@@ -181,9 +181,13 @@ func (m *MockClientController) RegisterFinalityProvider(consumerID string, chain
 }
 
 // RegisterFinalityProvider indicates an expected call of RegisterFinalityProvider.
-func (mr *MockClientControllerMockRecorder) RegisterFinalityProvider(consumerID, chainPk, fpPk, pop, commission, description, masterPubRand interface{}) *gomock.Call {
+<<<<<<< HEAD
+=======
+// todo: gurjot check here
+>>>>>>> c6eb134 (Merge remote-tracking branch 'origin/dev' into gusin13/latest-from-dev)
+func (mr *MockClientControllerMockRecorder) RegisterFinalityProvider(chainPk, fpPk, pop, commission, description, masterPubRand interface{}) *gomock.Call {
 	mr.mock.ctrl.T.Helper()
-	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFinalityProvider", reflect.TypeOf((*MockClientController)(nil).RegisterFinalityProvider), consumerID, chainPk, fpPk, pop, commission, description, masterPubRand)
+	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFinalityProvider", reflect.TypeOf((*MockClientController)(nil).RegisterFinalityProvider), chainPk, fpPk, pop, commission, description, masterPubRand)
 }
 
 // SubmitBatchFinalitySigs mocks base method.
diff --git a/tools/go.mod b/tools/go.mod
index 20f3dd3..71cc1f3 100644
--- a/tools/go.mod
+++ b/tools/go.mod
@@ -7,7 +7,7 @@ toolchain go1.21.4
 require github.com/babylonchain/babylon v0.8.6-0.20240416015120-ffeb9c5b930b
 
 require (
-	cloud.google.com/go v0.111.0 // indirect
+	cloud.google.com/go v0.110.10 // indirect
 	cloud.google.com/go/compute v1.23.3 // indirect
 	cloud.google.com/go/compute/metadata v0.2.3 // indirect
 	cloud.google.com/go/iam v1.1.5 // indirect
@@ -93,8 +93,6 @@ require (
 	github.com/go-kit/kit v0.12.0 // indirect
 	github.com/go-kit/log v0.2.1 // indirect
 	github.com/go-logfmt/logfmt v0.6.0 // indirect
-	github.com/go-logr/logr v1.2.4 // indirect
-	github.com/go-logr/stdr v1.2.2 // indirect
 	github.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 // indirect
 	github.com/gogo/googleapis v1.4.1 // indirect
 	github.com/gogo/protobuf v1.3.2 // indirect
@@ -188,9 +186,6 @@ require (
 	github.com/zondax/ledger-go v0.14.3 // indirect
 	go.etcd.io/bbolt v1.3.8 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	go.opentelemetry.io/otel v1.19.0 // indirect
-	go.opentelemetry.io/otel/metric v1.19.0 // indirect
-	go.opentelemetry.io/otel/trace v1.19.0 // indirect
 	go.uber.org/multierr v1.11.0 // indirect
 	golang.org/x/crypto v0.21.0 // indirect
 	golang.org/x/exp v0.0.0-20240213143201-ec583247a57a // indirect
@@ -201,15 +196,16 @@ require (
 	golang.org/x/term v0.18.0 // indirect
 	golang.org/x/text v0.14.0 // indirect
 	golang.org/x/time v0.5.0 // indirect
+	golang.org/x/xerrors v0.0.0-20220907171357-04be3eba64a2 // indirect
 	google.golang.org/api v0.153.0 // indirect
 	google.golang.org/appengine v1.6.8 // indirect
-	google.golang.org/genproto v0.0.0-20240116215550-a9fa1716bcac // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240125205218-1f4bbc51befe // indirect
-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240125205218-1f4bbc51befe // indirect
-	google.golang.org/grpc v1.61.0 // indirect
+	google.golang.org/genproto v0.0.0-20231211222908-989df2bf70f3 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20231120223509-83a465c0220f // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20231212172506-995d672761c0 // indirect
+	google.golang.org/grpc v1.60.1 // indirect
 	google.golang.org/protobuf v1.32.0 // indirect
 	gopkg.in/ini.v1 v1.67.0 // indirect
-	gopkg.in/yaml.v2 v2.4.0 // indirect; indirectc
+	gopkg.in/yaml.v2 v2.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 	gotest.tools/v3 v3.5.1 // indirect
 	nhooyr.io/websocket v1.8.6 // indirect
@@ -221,6 +217,5 @@ require (
 replace (
 	// use cosmos fork of keyring
 	github.com/99designs/keyring => github.com/cosmos/keyring v1.2.0
-	github.com/babylonchain/babylon => github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394
 	github.com/syndtr/goleveldb => github.com/syndtr/goleveldb v1.0.1-0.20210819022825-2ae1ddf74ef7
 )
diff --git a/tools/go.sum b/tools/go.sum
index 0f281da..f701268 100644
--- a/tools/go.sum
+++ b/tools/go.sum
@@ -30,8 +30,8 @@ cloud.google.com/go v0.100.2/go.mod h1:4Xra9TjzAeYHrl5+oeLlzbM2k3mjVhZh4UqTZ//w9
 cloud.google.com/go v0.102.0/go.mod h1:oWcCzKlqJ5zgHQt9YsaeTY9KzIvjyy0ArmiBUgpQ+nc=
 cloud.google.com/go v0.102.1/go.mod h1:XZ77E9qnTEnrgEOvr4xzfdX5TRo7fB4T2F4O6+34hIU=
 cloud.google.com/go v0.104.0/go.mod h1:OO6xxXdJyvuJPcEPBLN9BJPD+jep5G1+2U5B5gkRYtA=
-cloud.google.com/go v0.111.0 h1:YHLKNupSD1KqjDbQ3+LVdQ81h/UJbJyZG203cEfnQgM=
-cloud.google.com/go v0.111.0/go.mod h1:0mibmpKP1TyOOFYQY5izo0LnT+ecvOQ0Sg3OdmMiNRU=
+cloud.google.com/go v0.110.10 h1:LXy9GEO+timppncPIAZoOj3l58LIU9k+kn48AN7IO3Y=
+cloud.google.com/go v0.110.10/go.mod h1:v1OoFqYxiBkUrruItNM3eT4lLByNjxmJSV/xDKJNnic=
 cloud.google.com/go/aiplatform v1.22.0/go.mod h1:ig5Nct50bZlzV6NvKaTwmplLLddFx0YReh9WfTO5jKw=
 cloud.google.com/go/aiplatform v1.24.0/go.mod h1:67UUvRBKG6GTayHKV8DBv2RtR1t93YRu5B1P3x99mYY=
 cloud.google.com/go/analytics v0.11.0/go.mod h1:DjEWCu41bVbYcKyvlws9Er60YE4a//bK6mnhWvQeFNI=
@@ -268,8 +268,8 @@ github.com/aws/aws-sdk-go v1.44.122/go.mod h1:y4AeaBuwd2Lk+GepC1E9v0qOiTws0MIWAX
 github.com/aws/aws-sdk-go v1.44.312 h1:llrElfzeqG/YOLFFKjg1xNpZCFJ2xraIi3PqSuP+95k=
 github.com/aws/aws-sdk-go v1.44.312/go.mod h1:aVsgQcEevwlmQ7qHE9I3h+dtQgpqhFB+i8Phjh7fkwI=
 github.com/aws/aws-sdk-go-v2 v0.18.0/go.mod h1:JWVYvqSMppoMJC0x5wdwiImzgXTI9FuZwxzkQq9wy+g=
-github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394 h1:nEznkFhJ51TMHOqhCvzgDGrlTni5ce/8sbfDJw9lHkw=
-github.com/babylonchain/babylon-private v0.8.6-0.20240511143759-cc22aaf7f394/go.mod h1:Ku+LtNN6bPMU3H58PiTiFvIWUvEcASigN7kQP87Eg/o=
+github.com/babylonchain/babylon v0.8.6-0.20240416015120-ffeb9c5b930b h1:HfjAGZiebrcInFAq8Lk8MXbKbtTYxRoO65vfLPOCXzw=
+github.com/babylonchain/babylon v0.8.6-0.20240416015120-ffeb9c5b930b/go.mod h1:lfeASLNJgcUsX7LEns3HRUv0k+MjzcB2q2AMasfz38M=
 github.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=
 github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=
 github.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=
@@ -510,11 +510,6 @@ github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V
 github.com/go-logfmt/logfmt v0.5.0/go.mod h1:wCYkCAKZfumFQihp8CzCvQ3paCTfi41vtzG1KdI/P7A=
 github.com/go-logfmt/logfmt v0.6.0 h1:wGYYu3uicYdqXVgoYbvnkrPVXkuLM1p1ifugDMEdRi4=
 github.com/go-logfmt/logfmt v0.6.0/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=
-github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
-github.com/go-logr/logr v1.2.4 h1:g01GSCwiDw2xSZfjJ2/T9M+S6pFdcNtFYsp+Y43HYDQ=
-github.com/go-logr/logr v1.2.4/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
-github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
-github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
 github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
 github.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=
 github.com/go-playground/locales v0.14.0 h1:u50s323jtVGugKlcYeyzC0etD1HifMjqmJqb8WugfUU=
@@ -1104,14 +1099,6 @@ go.opencensus.io v0.22.5/go.mod h1:5pWMHQbX5EPX2/62yrJeAkowc+lfs/XD7Uxpq3pI6kk=
 go.opencensus.io v0.23.0/go.mod h1:XItmlyltB5F7CS4xOC1DcqMoFqwtC6OG2xF7mCv7P7E=
 go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
-go.opentelemetry.io/otel v1.19.0 h1:MuS/TNf4/j4IXsZuJegVzI1cwut7Qc00344rgH7p8bs=
-go.opentelemetry.io/otel v1.19.0/go.mod h1:i0QyjOq3UPoTzff0PJB2N66fb4S0+rSbSB15/oyH9fY=
-go.opentelemetry.io/otel/metric v1.19.0 h1:aTzpGtV0ar9wlV4Sna9sdJyII5jTVJEvKETPiOKwvpE=
-go.opentelemetry.io/otel/metric v1.19.0/go.mod h1:L5rUsV9kM1IxCj1MmSdS+JQAcVm319EUrDVLrt7jqt8=
-go.opentelemetry.io/otel/sdk v1.19.0 h1:6USY6zH+L8uMH8L3t1enZPR3WFEmSTADlqldyHtJi3o=
-go.opentelemetry.io/otel/sdk v1.19.0/go.mod h1:NedEbbS4w3C6zElbLdPJKOpJQOrGUJ+GfzpjUvI0v1A=
-go.opentelemetry.io/otel/trace v1.19.0 h1:DFVQmlVbfVeOuBRrwdtaehRrWiL1JoVs9CPIQ1Dzxpg=
-go.opentelemetry.io/otel/trace v1.19.0/go.mod h1:mfaSyvGyEJEI0nyV2I4qhNQnbBOUUmYZpYojqMnX2vo=
 go.opentelemetry.io/proto/otlp v0.7.0/go.mod h1:PqfVotwruBrMGOCsRd/89rSnXhoiJIqeYNgFYFoEGnI=
 go.uber.org/atomic v1.3.2/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
 go.uber.org/atomic v1.4.0/go.mod h1:gD2HeocX3+yG+ygLZcrzQJaqmWj9AIm7n08wl/qW/PE=
@@ -1651,12 +1638,12 @@ google.golang.org/genproto v0.0.0-20221010155953-15ba04fc1c0e/go.mod h1:3526vdqw
 google.golang.org/genproto v0.0.0-20221014173430-6e2ab493f96b/go.mod h1:1vXfmgAz9N9Jx0QA82PqRVauvCz1SGSz739p0f183jM=
 google.golang.org/genproto v0.0.0-20221014213838-99cd37c6964a/go.mod h1:1vXfmgAz9N9Jx0QA82PqRVauvCz1SGSz739p0f183jM=
 google.golang.org/genproto v0.0.0-20221025140454-527a21cfbd71/go.mod h1:9qHF0xnpdSfF6knlcsnpzUu5y+rpwgbvsyGAZPBMg4s=
-google.golang.org/genproto v0.0.0-20240116215550-a9fa1716bcac h1:ZL/Teoy/ZGnzyrqK/Optxxp2pmVh+fmJ97slxSRyzUg=
-google.golang.org/genproto v0.0.0-20240116215550-a9fa1716bcac/go.mod h1:+Rvu7ElI+aLzyDQhpHMFMMltsD6m7nqpuWDd2CwJw3k=
-google.golang.org/genproto/googleapis/api v0.0.0-20240125205218-1f4bbc51befe h1:0poefMBYvYbs7g5UkjS6HcxBPaTRAmznle9jnxYoAI8=
-google.golang.org/genproto/googleapis/api v0.0.0-20240125205218-1f4bbc51befe/go.mod h1:4jWUdICTdgc3Ibxmr8nAJiiLHwQBY0UI0XZcEMaFKaA=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240125205218-1f4bbc51befe h1:bQnxqljG/wqi4NTXu2+DJ3n7APcEA882QZ1JvhQAq9o=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240125205218-1f4bbc51befe/go.mod h1:PAREbraiVEVGVdTZsVWjSbbTtSyGbAgIIvni8a8CD5s=
+google.golang.org/genproto v0.0.0-20231211222908-989df2bf70f3 h1:1hfbdAfFbkmpg41000wDVqr7jUpK/Yo+LPnIxxGzmkg=
+google.golang.org/genproto v0.0.0-20231211222908-989df2bf70f3/go.mod h1:5RBcpGRxr25RbDzY5w+dmaqpSEvl8Gwl1x2CICf60ic=
+google.golang.org/genproto/googleapis/api v0.0.0-20231120223509-83a465c0220f h1:2yNACc1O40tTnrsbk9Cv6oxiW8pxI/pXj0wRtdlYmgY=
+google.golang.org/genproto/googleapis/api v0.0.0-20231120223509-83a465c0220f/go.mod h1:Uy9bTZJqmfrw2rIBxgGLnamc78euZULUBrLZ9XTITKI=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20231212172506-995d672761c0 h1:/jFB8jK5R3Sq3i/lmeZO0cATSzFfZaJq1J2Euan3XKU=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20231212172506-995d672761c0/go.mod h1:FUoWkonphQm3RhTS+kOEhF8h0iDpm4tdXolVCeZ9KKA=
 google.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.20.0/go.mod h1:chYK+tFQF0nDUGJgXMSgLCQk3phJEuONr2DCgLDdAQM=
@@ -1698,8 +1685,8 @@ google.golang.org/grpc v1.48.0/go.mod h1:vN9eftEi1UMyUsIF80+uQXhHjbXYbm0uXoFCACu
 google.golang.org/grpc v1.49.0/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=
 google.golang.org/grpc v1.50.0/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=
 google.golang.org/grpc v1.50.1/go.mod h1:ZgQEeidpAuNRZ8iRrlBKXZQP1ghovWIVhdJRyCDK+GI=
-google.golang.org/grpc v1.61.0 h1:TOvOcuXn30kRao+gfcvsebNEa5iZIiLkisYEkf7R7o0=
-google.golang.org/grpc v1.61.0/go.mod h1:VUbo7IFqmF1QtCAstipjG0GIoq49KvMe9+h1jFLBNJs=
+google.golang.org/grpc v1.60.1 h1:26+wFr+cNqSGFcOXcabYC0lUVJVRa2Sb2ortSK7VrEU=
+google.golang.org/grpc v1.60.1/go.mod h1:OlCHIeLYqSSsLi6i49B5QGdzaMZK9+M7LXN2FKz4eGM=
 google.golang.org/grpc/cmd/protoc-gen-go-grpc v1.1.0/go.mod h1:6Kw0yEErY5E/yWrBtf03jp27GLLJujG4z/JK95pnjjw=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
