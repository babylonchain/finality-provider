// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: validators.proto

package valrpc

import (
	_ "github.com/gogo/protobuf/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValidatorStatus is the status of a BTC validator
// a Validator object has 4 states:
//   - Created - created and managed by validator client, not registered to
//     babylon yet
//   - Registred - created and registered to Babylon, but not voting yet (No
//     delegated stake)
//   - Active - created and registered to Babylon with stake to vote
//   - Inactive - created and registered to Babylon with no stake to vote.
//     Validator was already active.
//
// Valid State Transtions:
//   - Created   -> Registred
//   - Registred -> Active
//   - Active    -> Inactive
//   - Inactive  -> Active
type ValidatorStatus int32

const (
	// CREATED defines a validator that is awaiting registration
	ValidatorStatus_CREATED ValidatorStatus = 0
	// REGISTERED defines a validator that has been registered to Babylon but
	// has no delegated stake
	ValidatorStatus_REGISTERED ValidatorStatus = 1
	// ACTIVE defines a validator that is delegated to vote
	ValidatorStatus_ACTIVE ValidatorStatus = 2
	// INACTIVE defines a validator whose delegations are reduced to zero
	ValidatorStatus_INACTIVE ValidatorStatus = 3
)

// Enum value maps for ValidatorStatus.
var (
	ValidatorStatus_name = map[int32]string{
		0: "CREATED",
		1: "REGISTERED",
		2: "ACTIVE",
		3: "INACTIVE",
	}
	ValidatorStatus_value = map[string]int32{
		"CREATED":    0,
		"REGISTERED": 1,
		"ACTIVE":     2,
		"INACTIVE":   3,
	}
)

func (x ValidatorStatus) Enum() *ValidatorStatus {
	p := new(ValidatorStatus)
	*p = x
	return p
}

func (x ValidatorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_validators_proto_enumTypes[0].Descriptor()
}

func (ValidatorStatus) Type() protoreflect.EnumType {
	return &file_validators_proto_enumTypes[0]
}

func (x ValidatorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorStatus.Descriptor instead.
func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{0}
}

type RegisterValidatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bech32 encoded address of the registering validator
	BabylonAddr string `protobuf:"bytes,1,opt,name=babylon_addr,json=babylonAddr,proto3" json:"babylon_addr,omitempty"`
}

func (x *RegisterValidatorRequest) Reset() {
	*x = RegisterValidatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorRequest) ProtoMessage() {}

func (x *RegisterValidatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorRequest.ProtoReflect.Descriptor instead.
func (*RegisterValidatorRequest) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterValidatorRequest) GetBabylonAddr() string {
	if x != nil {
		return x.BabylonAddr
	}
	return ""
}

type RegisterValidatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hash of the successful Babylon registration transaction
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *RegisterValidatorResponse) Reset() {
	*x = RegisterValidatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterValidatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterValidatorResponse) ProtoMessage() {}

func (x *RegisterValidatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterValidatorResponse.ProtoReflect.Descriptor instead.
func (*RegisterValidatorResponse) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterValidatorResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// babylon_pk is the Babylon secp256k1 PK of this BTC validator
	BabylonPk []byte `protobuf:"bytes,1,opt,name=babylon_pk,json=babylonPk,proto3" json:"babylon_pk,omitempty"`
	// btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
	BtcPk []byte `protobuf:"bytes,2,opt,name=btc_pk,json=btcPk,proto3" json:"btc_pk,omitempty"`
	// last_voted_block_height defines the height of the last voted Babylon
	// block
	LastVotedBlockHeight uint64 `protobuf:"varint,3,opt,name=last_voted_block_height,json=lastVotedBlockHeight,proto3" json:"last_voted_block_height,omitempty"`
	// status defines the current validator status
	Status ValidatorStatus `protobuf:"varint,4,opt,name=status,proto3,enum=valrpc.ValidatorStatus" json:"status,omitempty"`
	// committed_rand_list defines a list of Schnorr randomness pairs committed
	// to Babylon
	CommittedRandList []*SchnorrRandPair `protobuf:"bytes,5,rep,name=committed_rand_list,json=committedRandList,proto3" json:"committed_rand_list,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{2}
}

func (x *Validator) GetBabylonPk() []byte {
	if x != nil {
		return x.BabylonPk
	}
	return nil
}

func (x *Validator) GetBtcPk() []byte {
	if x != nil {
		return x.BtcPk
	}
	return nil
}

func (x *Validator) GetLastVotedBlockHeight() uint64 {
	if x != nil {
		return x.LastVotedBlockHeight
	}
	return 0
}

func (x *Validator) GetStatus() ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return ValidatorStatus_CREATED
}

func (x *Validator) GetCommittedRandList() []*SchnorrRandPair {
	if x != nil {
		return x.CommittedRandList
	}
	return nil
}

type SchnorrRandPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubRand []byte `protobuf:"bytes,1,opt,name=pub_rand,json=pubRand,proto3" json:"pub_rand,omitempty"`
	SecRand []byte `protobuf:"bytes,2,opt,name=sec_rand,json=secRand,proto3" json:"sec_rand,omitempty"`
}

func (x *SchnorrRandPair) Reset() {
	*x = SchnorrRandPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validators_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchnorrRandPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchnorrRandPair) ProtoMessage() {}

func (x *SchnorrRandPair) ProtoReflect() protoreflect.Message {
	mi := &file_validators_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchnorrRandPair.ProtoReflect.Descriptor instead.
func (*SchnorrRandPair) Descriptor() ([]byte, []int) {
	return file_validators_proto_rawDescGZIP(), []int{3}
}

func (x *SchnorrRandPair) GetPubRand() []byte {
	if x != nil {
		return x.PubRand
	}
	return nil
}

func (x *SchnorrRandPair) GetSecRand() []byte {
	if x != nil {
		return x.SecRand
	}
	return nil
}

var File_validators_proto protoreflect.FileDescriptor

var file_validators_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x76, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x1a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x62,
	0x79, 0x6c, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x34, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0xf2,
	0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x5f, 0x70, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x62, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x50, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x74, 0x63, 0x5f, 0x70, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x74, 0x63,
	0x50, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x61, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x52, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x6e, 0x6f, 0x72, 0x72, 0x52, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x75, 0x62, 0x52, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x2a, 0x85, 0x01, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x0b, 0x8a,
	0x9d, 0x20, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x0e, 0x8a, 0x9d, 0x20, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x1a, 0x0c, 0x8a, 0x9d, 0x20, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x04,
	0x88, 0xa3, 0x1e, 0x00, 0x32, 0x69, 0x0a, 0x0d, 0x42, 0x74, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x76, 0x61, 0x6c,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76,
	0x61, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61,
	0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x62, 0x74, 0x63, 0x2d, 0x76,
	0x61, 0x6c, 0x2f, 0x76, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_validators_proto_rawDescOnce sync.Once
	file_validators_proto_rawDescData = file_validators_proto_rawDesc
)

func file_validators_proto_rawDescGZIP() []byte {
	file_validators_proto_rawDescOnce.Do(func() {
		file_validators_proto_rawDescData = protoimpl.X.CompressGZIP(file_validators_proto_rawDescData)
	})
	return file_validators_proto_rawDescData
}

var file_validators_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_validators_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_validators_proto_goTypes = []interface{}{
	(ValidatorStatus)(0),              // 0: valrpc.ValidatorStatus
	(*RegisterValidatorRequest)(nil),  // 1: valrpc.RegisterValidatorRequest
	(*RegisterValidatorResponse)(nil), // 2: valrpc.RegisterValidatorResponse
	(*Validator)(nil),                 // 3: valrpc.Validator
	(*SchnorrRandPair)(nil),           // 4: valrpc.SchnorrRandPair
}
var file_validators_proto_depIdxs = []int32{
	0, // 0: valrpc.Validator.status:type_name -> valrpc.ValidatorStatus
	4, // 1: valrpc.Validator.committed_rand_list:type_name -> valrpc.SchnorrRandPair
	1, // 2: valrpc.BtcValidators.RegisterValidator:input_type -> valrpc.RegisterValidatorRequest
	2, // 3: valrpc.BtcValidators.RegisterValidator:output_type -> valrpc.RegisterValidatorResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_validators_proto_init() }
func file_validators_proto_init() {
	if File_validators_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validators_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterValidatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validators_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchnorrRandPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validators_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_validators_proto_goTypes,
		DependencyIndexes: file_validators_proto_depIdxs,
		EnumInfos:         file_validators_proto_enumTypes,
		MessageInfos:      file_validators_proto_msgTypes,
	}.Build()
	File_validators_proto = out.File
	file_validators_proto_rawDesc = nil
	file_validators_proto_goTypes = nil
	file_validators_proto_depIdxs = nil
}
