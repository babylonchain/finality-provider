// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: validators.proto

package valrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BtcValidators_RegisterValidator_FullMethodName = "/valrpc.BtcValidators/RegisterValidator"
)

// BtcValidatorsClient is the client API for BtcValidators service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtcValidatorsClient interface {
	RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error)
}

type btcValidatorsClient struct {
	cc grpc.ClientConnInterface
}

func NewBtcValidatorsClient(cc grpc.ClientConnInterface) BtcValidatorsClient {
	return &btcValidatorsClient{cc}
}

func (c *btcValidatorsClient) RegisterValidator(ctx context.Context, in *RegisterValidatorRequest, opts ...grpc.CallOption) (*RegisterValidatorResponse, error) {
	out := new(RegisterValidatorResponse)
	err := c.cc.Invoke(ctx, BtcValidators_RegisterValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtcValidatorsServer is the server API for BtcValidators service.
// All implementations must embed UnimplementedBtcValidatorsServer
// for forward compatibility
type BtcValidatorsServer interface {
	RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error)
	mustEmbedUnimplementedBtcValidatorsServer()
}

// UnimplementedBtcValidatorsServer must be embedded to have forward compatible implementations.
type UnimplementedBtcValidatorsServer struct {
}

func (UnimplementedBtcValidatorsServer) RegisterValidator(context.Context, *RegisterValidatorRequest) (*RegisterValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterValidator not implemented")
}
func (UnimplementedBtcValidatorsServer) mustEmbedUnimplementedBtcValidatorsServer() {}

// UnsafeBtcValidatorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtcValidatorsServer will
// result in compilation errors.
type UnsafeBtcValidatorsServer interface {
	mustEmbedUnimplementedBtcValidatorsServer()
}

func RegisterBtcValidatorsServer(s grpc.ServiceRegistrar, srv BtcValidatorsServer) {
	s.RegisterService(&BtcValidators_ServiceDesc, srv)
}

func _BtcValidators_RegisterValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcValidatorsServer).RegisterValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BtcValidators_RegisterValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcValidatorsServer).RegisterValidator(ctx, req.(*RegisterValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BtcValidators_ServiceDesc is the grpc.ServiceDesc for BtcValidators service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BtcValidators_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valrpc.BtcValidators",
	HandlerType: (*BtcValidatorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterValidator",
			Handler:    _BtcValidators_RegisterValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validators.proto",
}
