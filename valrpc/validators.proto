syntax = "proto3";

package valrpc;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "github.com/babylonchain/btc-val/valrpc";

service BtcValidators {
    // GetInfo returns the information of the daemon
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

    // CreateValidator generates and saves a validator object
    rpc CreateValidator (CreateValidatorRequest)
        returns (CreateValidatorResponse);

    // RegisterValidator sends a transactions to Babylon to register a BTC
    // validator
    rpc RegisterValidator (RegisterValidatorRequest)
        returns (RegisterValidatorResponse);

    // QueryValidator queries the validator
    rpc QueryValidator (QueryValidatorRequest) returns (QueryValidatorResponse);
    // QueryValidatorList queries a list of validators
    rpc QueryValidatorList (QueryValidatorListRequest)
        returns (QueryValidatorListResponse);
}

message GetInfoRequest {
}

message GetInfoResponse {
    string version = 1;
}

message CreateValidatorRequest {
}

message CreateValidatorResponse {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    bytes babylon_pk = 1;
    // btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
    bytes btc_pk = 2;
}

message RegisterValidatorRequest {
    // bech32 encoded address of the registering validator
    string babylon_addr = 1;
}

message RegisterValidatorResponse {
    // hash of the successful Babylon registration transaction
    bytes tx_hash = 1;
}

message QueryValidatorRequest {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    // used as the identifier of the created validator
    bytes babylon_pk = 1;
}

message QueryValidatorResponse {
    Validator validator = 1;
}

message QueryValidatorListRequest {
    // TODO add pagination in case the list gets large
}

message QueryValidatorListResponse {
    repeated Validator validators = 1;
    // TODO add pagination in case the list gets large
}

message Validator {
    // babylon_pk is the Babylon secp256k1 PK of this BTC validator
    bytes babylon_pk = 1;
    // btc_pk is the BTC secp256k1 PK of the validator encoded in BIP-340 spec
    bytes btc_pk = 2;
    // last_voted_height defines the height of the last voted Babylon block
    uint64 last_voted_height = 3;
    // last_committed_height defines the height of the last Babylon block
    // to which the validator committed a randomness pair
    uint64 last_committed_height = 4;
    // status defines the current validator status
    ValidatorStatus status = 5;
}

message SchnorrRandPair {
    bytes pub_rand = 1;
    bytes sec_rand = 2;
}

// CommittedRandPair defines the Schonorr randomness pair that has been
// committed to Babylon stored in the DB as: babylon_pk + committed_height ->
// pair
message CommittedRandPair {
    SchnorrRandPair pair = 1;
}

// ValidatorStatus is the status of a BTC validator
// a Validator object has 4 states:
//  - Created - created and managed by validator client, not registered to
//  babylon yet
//  - Registered - created and registered to Babylon, but not voting yet (No
//  delegated stake)
//  - Active - created and registered to Babylon with stake to vote
//  - Inactive - created and registered to Babylon with no stake to vote.
//  Validator was already active.
// Valid State Transactions:
//  - Created   -> Registered
//  - Registered -> Active
//  - Active    -> Inactive
//  - Inactive  -> Active
enum ValidatorStatus {
    option (gogoproto.goproto_enum_prefix) = false;

    // VALIDATOR_STATUS_CREATED defines a validator that is awaiting
    // registration
    VALIDATOR_STATUS_CREATED = 0 [(gogoproto.enumvalue_customname) = "Created"];
    // VALIDATOR_STATUS_REGISTERED defines a validator that has been registered
    // to Babylon but has no delegated stake
    VALIDATOR_STATUS_REGISTERED = 1
        [(gogoproto.enumvalue_customname) = "Registered"];
    // VALIDATOR_STATUS_ACTIVE defines a validator that is delegated to vote
    VALIDATOR_STATUS_ACTIVE = 2 [(gogoproto.enumvalue_customname) = "Active"];
    // VALIDATOR_STATUS_INACTIVE defines a validator whose delegations are
    // reduced to zero
    VALIDATOR_STATUS_INACTIVE = 3
        [(gogoproto.enumvalue_customname) = "Inactive"];
}
