syntax = "proto3";

package proto;

option go_package = "github.com/babylonchain/btc-validator/eotsmanager/proto";

service EOTSManager {
  // CreateKey generates and saves an EOTS key
  rpc CreateKey (CreateKeyRequest)
      returns (CreateKeyResponse);

  // CreateRandomnessPairList returns a list of Schnorr randomness pairs
  rpc CreateRandomnessPairList (CreateRandomnessPairListRequest)
      returns (CreateRandomnessPairListResponse);

  // KeyRecord returns the key record
  rpc KeyRecord(KeyRecordRequest)
      returns (KeyRecordResponse);

  // SignEOTS signs an EOTS with the EOTS private key and the relevant randomness
  rpc SignEOTS (SignEOTSRequest)
      returns (SignEOTSResponse);

  // SignSchnorrSig signs a Schnorr sig with teh EOTS private key
  rpc SignSchnorrSig (SignSchnorrSigRequest)
      returns (SignSchnorrSigResponse);
}

message CreateKeyRequest {
  // name is the identifier key in keyring
  string name = 1;
  // pass_phrase is used to encrypt the keys
  string pass_phrase = 2;
}

message CreateKeyResponse {
  // pk is the EOTS public key following BIP-340 spec
  bytes pk = 1;
}

message CreateRandomnessPairListRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // chain_id is the identifier of the consumer chain that the randomness is committed to
  bytes chain_id = 2;
  // start_height is the start height of the randomness pair list
  uint64 start_height = 3;
  // num is the number of randomness pair list
  uint32 num = 4;
}

message CreateRandomnessPairListResponse {
  // pub_rand_list is a list of Schnorr public randomness
  repeated bytes pub_rand_list = 1;
}

message KeyRecordRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // pass_phrase is used to decrypt the keys
  string pass_phrase = 2;
}

message KeyRecordResponse {
  // name is the identifier key in keyring
  string name = 1;
  // private_key is the private EOTS key encoded in secp256k1 spec
  bytes private_key = 2;
}

message SignEOTSRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // chain_id is the identifier of the consumer chain that the randomness is committed to
  bytes chain_id = 2;
  // the message which the EOTS signs
  bytes msg = 3;
  // the block height which the EOTS signs
  uint64 height = 4;
}

message SignEOTSResponse {
  // sig is the EOTS signature
  bytes sig = 1;
}

message SignSchnorrSigRequest {
  // uid is the identifier of an EOTS key, i.e., public key following BIP-340 spec
  bytes uid = 1;
  // the message which the Schnorr signature signs
  bytes msg = 2;
}

message SignSchnorrSigResponse {
  // sig is the Schnorr signature
  bytes sig = 1;
}
